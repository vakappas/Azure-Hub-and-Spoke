{
    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "vnetName": {
            "defaultValue": "HUB",
            "type": "string"
        },
        "vnetPrefix": {
            "defaultValue": "10.0.0.0/24",
            "type": "string"
        },
        "GatewaySubnetPrefix": {
            "defaultValue": "10.0.0.0/27",
            "type": "string"
        },
        "subnet1Name": {
            "defaultValue": "Outside",
            "type": "string"
        },
        "subnet1Prefix": {
            "defaultValue": "10.0.0.32/27",
            "type": "string"
        },
        "subnet2Name": {
            "defaultValue": "Inside",
            "type": "string"
        },
        "subnet2Prefix": {
            "defaultValue": "10.0.0.64/27",
            "type": "string"
        },
        "subnet3Name": {
            "defaultValue": "ADDS",
            "type": "string"
        },
        "subnet3Prefix": {
            "defaultValue": "10.0.0.96/27",
            "type": "string"
        },
        "subnet4Name": {
            "defaultValue": "MGMT",
            "type": "string"
        },
        "subnet4Prefix": {
            "defaultValue": "10.0.0.128/27",
            "type": "string"
        },
        "config": {
            "type": "object",
            "defaultValue": {
                "NVAs": [
                    {
                        "nvaName": "NVA-01",
                        "nvaSize": "Standard_D2s_v3",
                        "nvaip0": "10.0.0.41",
                        "nvaip1": "10.0.0.71",
                        "nvaType": "ubuntu"
                        
                    },
                    {
                        "nvaName": "AZR_FTDv",
                        "nvaSize": "Standard_D3_v2",
                        "nvaip0": "10.48.128.250",
                        "nvaip1": "10.48.129.250",
                        "nvaType": "ftdv"
                    },
                    {
                        "nvaName": "AZR_CSR",
                        "nvaSize": "Standard_D3_v2",
                        "nvaip0": "10.48.129.254",
                        "nvaip1": "10.48.130.254",
                        "nvaip2": "10.48.131.254",
                        "nvaType": "csr"
                    }
                ]
            }
        },
        "createGw": {
            "defaultValue": "no",
            "type": "string",
            "allowedValues": ["yes", "no"]
        },
        "gwName": {
            "defaultValue": "myGw",
            "type": "string",
            "metadata": { "description": "Name for the VPN gateway"}
        },
        "enableBgp": {
            "type": "string",
            "metadata": { "description": "Enable or disable BGP" },
            "defaultValue": "false",
            "allowedValues": ["true", "false"]    
        },
        "linuxvmName": {
            "type": "string",
            "defaultValue": "mylinuxVm"
        },
        "linuxvmSize": {
            "type": "string",
            "defaultValue": "Standard_B1s"
        },
        "windowsvmName": {
            "type": "string",
            "defaultValue": "mywindowsVm"
        },
        "windowsvmSize": {
            "type": "string",
            "defaultValue": "Standard_B1s"
        },
        "adminUsername": {
            "type": "string",
            "defaultValue": "lab-user"
        },
        "adminPassword": {
            "type": "secureString"
        }
    },
    "variables": {
        "networkApiVersion": "2018-04-01",
        "computeApiVersion": "2018-06-01",
        "storageApiVersion": "2018-07-01",
        "deploymentApiVersion": "2017-05-10",
        "linuxvmTemplateUri": "[uri(deployment().properties.templateLink.uri,'linuxVM.json')]",
        "windowsvmTemplateUri": "[uri(deployment().properties.templateLink.uri,'windowsVM.json')]",
        "nvaTemplateUri": "[uri(deployment().properties.templateLink.uri,'nva_2nic.json')]",
        "nvaLinuxTemplateUri": "[uri(deployment().properties.templateLink.uri,'nvaLinux_2nic_noVnet.json')]",
        "gwTemplateUri": "[uri(deployment().properties.templateLink.uri, 'vpnGw.json')]",
        "gwPipUri": "[uri(deployment().properties.templateLink.uri, 'pipDynamic.json')]",
        "gwPIPName": "[concat(parameters('gwName'),'-pip')]",
        "asav":"[parameters('config')['NVAs'][0]]",
        "ftdv": "[parameters('config')['NVAs'][1]]",
        "csr": "[parameters('config')['NVAs'][2]]"
   },
    "resources": [
        {
            "comments": "Create Vnet with four subnets and a Gateway Subnet",
            "type": "Microsoft.Network/virtualNetworks",
            "name": "[parameters('vnetName')]",
            "apiVersion": "[variables('networkApiVersion')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "[parameters('vnetPrefix')]"
                    ]
                },
                "subnets": [
                    {
                        "name": "GatewaySubnet",
                        "properties": {
                            "addressPrefix": "[parameters('GatewaySubnetPrefix')]"
                        }
                    },
                    {
                        "name": "[parameters('subnet1Name')]",
                        "properties": {
                            "addressPrefix": "[parameters('subnet1Prefix')]"                            
                        }
                    },
                    {
                        "name": "[parameters('subnet2Name')]",
                        "properties": {
                            "addressPrefix": "[parameters('subnet2Prefix')]"
                        }
                    },
                    {
                        "name": "[parameters('subnet3Name')]",
                        "properties": {
                            "addressPrefix": "[parameters('subnet3Prefix')]"
                        }
                    },
                    {
                        "name": "[parameters('subnet4Name')]",
                        "properties": {
                            "addressPrefix": "[parameters('subnet4Prefix')]"
                        }
                    }
				]
            },
            "resources": [],
            "dependsOn": [
            ]
        },
        {
			"comments": "Optionally create a public IP address, if createGw equals 'yes'",
            "condition": "[equals(parameters('createGw'), 'yes')]",
			"name": "[variables('gwPIPName')]",
            "type": "Microsoft.Resources/deployments",
			"apiVersion": "[variables('deploymentApiVersion')]",
			"properties": {
				"mode": "Incremental",
				"templateLink": {
					"uri": "[variables('gwPipUri')]",
					"contentVersion": "1.0.0.0"
				},
				"parameters": {
                    "pipName": { "value": "[variables('gwPIPName')]" }
                }
            },
            "dependsOn": [
                "[parameters('vnetName')]"
            ]
        },
        {
            "comments": "Optionally create VPN gateway, if createGw equals 'yes'",
            "condition": "[equals(parameters('createGw'), 'yes')]",
			"name": "[concat(parameters('vnetName'), 'VpnGw')]",
            "type": "Microsoft.Resources/deployments",
			"apiVersion": "[variables('deploymentApiVersion')]",
			"properties": {
				"mode": "Incremental",
				"templateLink": {
					"uri": "[variables('gwTemplateUri')]",
					"contentVersion": "1.0.0.0"
				},
				"parameters": {
                    "vnetName": { "value": "[parameters('vnetName')]" },
                    "gwName": {"value": "[concat(parameters('vnetName'), parameters('gwName'))]"},
                    "PIPName": { "value": "[variables('gwPIPName')]" },
                    "enableBgp": { "value": "[parameters('enableBgp')]" }   
                }
            },
            "dependsOn": [
                "[variables('gwPIPName')]",
                "[parameters('vnetName')]"                
            ]
        },
        {
			"comments": "Create a Cisco ASA NVA with 2nics and connect it to given vnet and subnets",
			"name": "ASAv",
            "type": "Microsoft.Resources/deployments",
			"apiVersion": "[variables('deploymentApiVersion')]",
			"properties": {
				"mode": "Incremental",
				"templateLink": {
					"uri": "[variables('nvaTemplateUri')]",
					"contentVersion": "1.0.0.0"
				},
				 "parameters": {
                    "adminUsername": {"value": "[parameters('adminUsername')]"},
                    "adminPassword": {"value": "[parameters('adminPassword')]"},
                    "vmType": {"value": "[variables('asav').nvaType]"},
                    "vnetName": {"value": "[parameters('vnetName')]"},
                    "subnet0Name": { "value": "[parameters('subnet1Name')]"},
                    "subnet1Name": { "value": "[parameters('subnet2Name')]"},
                    "ip0": {"value": "[variables('asav').nvaip0]"},
                    "ip1": {"value": "[variables('asav').nvaip1]"},
                    "pipName":{"value": "asav-publicIP"},
                    "vmName": {"value": "[variables('asav').nvaName]"}
                }
            },
            "dependsOn": [
                "[parameters('vnetName')]"
            ]
        },
        {
			"comments": "Create a Cisco FTD NVA with 2nics and connect it to given vnet and subnets",
			"name": "FTDv",
            "type": "Microsoft.Resources/deployments",
			"apiVersion": "[variables('deploymentApiVersion')]",
			"properties": {
				"mode": "Incremental",
				"templateLink": {
					"uri": "[variables('nvaTemplateUri')]",
					"contentVersion": "1.0.0.0"
				},
				 "parameters": {
                    "adminUsername": {"value": "[parameters('adminUsername')]"},
                    "adminPassword": {"value": "[parameters('adminPassword')]"},
                    "vmType": {"value": "[variables('ftdv').nvaType]"},
                    "vnetName": {"value": "[parameters('vnetName')]"},
                    "subnet0Name": { "value": "[parameters('subnet1Name')]"},
                    "subnet1Name": { "value": "[parameters('subnet2Name')]"},
                    "ip0": {"value": "[variables('ftdv').nvaip0]"},
                    "ip1": {"value": "[variables('ftdv').nvaip1]"},
                    "pipName":{"value": "ftdv-publicIP"},
                    "vmName": {"value": "[variables('ftdv').nvaName]"}
                }
            },
            "dependsOn": [
                "[parameters('vnetName')]"
            ]
        },
        {
			"comments": "Create a Cisco CSR Router with 3nics and connect it to given vnet and subnets",
			"name": "CSR",
            "type": "Microsoft.Resources/deployments",
			"apiVersion": "[variables('deploymentApiVersion')]",
			"properties": {
				"mode": "Incremental",
				"templateLink": {
					"uri": "[variables('nva3nicsTemplateUri')]",
					"contentVersion": "1.0.0.0"
				},
				 "parameters": {
                    "adminUsername": {"value": "[parameters('adminUsername')]"},
                    "adminPassword": {"value": "[parameters('adminPassword')]"},
                    "vmType": {"value": "[variables('csr').nvaType]"},
                    "vnetName": {"value": "[parameters('vnetName')]"},
                    "subnet0Name": { "value": "[parameters('subnet2Name')]"},
                    "subnet1Name": { "value": "[parameters('subnet3Name')]"},
                    "subnet2Name": { "value": "[parameters('subnet4Name')]"},
                    "ip0": {"value": "[variables('csr').nvaip0]"},
                    "ip1": {"value": "[variables('csr').nvaip1]"},
                    "ip2": {"value": "[variables('csr').nvaip2]"},
                    "pipName":{"value": "csr-publicIP"},
                    "vmName": {"value": "[variables('csr').nvaName]"}
                }
            },
            "dependsOn": [
                "[parameters('vnetName')]"
            ]
        }        
     ],
    "outputs": {
        "adminUsername": {
            "type": "string",
            "value": "[parameters('adminUsername')]"
        }
    }
}
