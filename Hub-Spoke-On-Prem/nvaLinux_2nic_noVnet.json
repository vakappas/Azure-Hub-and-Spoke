{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "apiVersion": {
            "defaultValue": "2015-06-15",
            "type": "string"
        },
        "vnetName": {
            "defaultValue": "myVnet4",
            "type": "string"
        },
        "storageAccountName": {
            "defaultValue": "put here an unique name for your storage account",
            "type": "string"
        },
        "vmType": {
            "defaultValue": "ubuntu",
            "type": "string",
            "allowedValues": ["ubuntu", "centos"]
        },
        "vmCount": {
            "defaultValue": 1,
            "type": "int"
        },
        "vmName": {
            "defaultValue": "myNva",
            "type": "string"
        },
        "adminUsername": {
            "defaultValue": "myadmin",
            "type": "string"
        },
        "vmSize": {
            "defaultValue": "Standard_B2ms",
            "type": "string"
        },
        "adminPassword": {
            "defaultValue": null,
            "type": "securestring"
        },
        "pipName": {
            "defaultValue": "nva-publicIP",
            "type": "string"
        },
        "createPip": {
            "defaultValue": "no",
            "type": "string",
            "allowedValues": ["yes", "no"]
        },
        "subnet0Name": {
            "defaultValue": "subnet1",
            "type": "string"
        },
        "subnet1Name": {
            "defaultValue": "subnet2",
            "type": "string"
        },
        "ip0": {
            "defaultValue": "10.0.0.10",
            "type": "string",
            "metadata": { "description": "This string will be completed with the copyIndex: .101, .102, etc" }
        },
        "ip1": {
            "defaultValue": "10.0.1.10",
            "type": "string",
            "metadata": { "description": "This string will be completed with the copyIndex: .101, .102, etc" }
        },
        "scriptUri": {
            "defaultValue": "[uri(deployment().properties.templateLink.uri, 'linuxNVAconfig.sh')]",
            "type": "string",
            "metadata": { "description": "Script that will be executed" }            
        },
        "scriptCmd": {
            "defaultValue": "sh linuxNVAconfig.sh",
            "type": "string",
            "metadata": { "description": "Command to run the script" }            
        },
        "deployLBYesNo": {
            "defaultValue": "no",
            "type": "string"
        },
        "lbSku": {
            "defaultValue": "basic",
            "type": "string",
            "allowedValues": [ "basic","standard" ],
            "metadata": { "description": "Whether Load Balancers should be Basic or Standard" }
        }
    },
    "variables": {
        "computeApiVersion": "2018-06-01",
        "OsDiskType": "StandardSSD_LRS",
        "nicTemplatePipNsg": "[uri(deployment().properties.templateLink.uri, 'nic_NSG_noSLB_PIP_static.json')]",
        "nicTemplateNoPipNsg": "[uri(deployment().properties.templateLink.uri, 'nic_NSG_noSLB_noPIP_static.json')]",
        "nicTemplateNoPipNoNsg": "[uri(deployment().properties.templateLink.uri, 'nic_noNSG_noSLB_noPIP_static.json')]",
        "nic0Template": "[if(equals(parameters('createPip'), 'yes'), variables('nicTemplatePipNsg'), variables('nicTemplateNoPipNsg'))]",
        "nic1Template": "[variables('nicTemplateNoPipNoNsg')]",
        "defaultGw": {
            "nic0": "[concat(parameters('ip0'), '1')]",
            "nic1": "[concat(parameters('ip1'), '1')]"
        },
        "settingsTable": {
            "ubuntu": {
                "product": "UbuntuServer",
                "publisher": "Canonical",
                "sku": "16.04.0-LTS",
                "vmSize": "[parameters('vmSize')]"
            },
            "centos": {
                "product": "CentOS",
                "publisher": "openlogic",
                "sku": "7.6",
                "vmSize": "[parameters('vmSize')]"
            }
        },
        "settings": "[variables('settingsTable')[parameters('vmType')]]",
        "avSetName": "[concat(parameters('vmName'),'AvSet')]",
        "slbName": "[concat(parameters('vmName'), '-slb')]",
        "slbBackendName": "[concat(parameters('vmName'), '-slbBackend')]",
        "slbPipName": "[concat(parameters('vmName'), '-slbPip')]",
        "ipPrefix": "10.4.2",
        "vipSuffix": "100",
        "slbSubnet": "[parameters('subnet0Name')]",
		"deployLBTemplate": {
			"yes": "[uri(deployment().properties.templateLink.uri, 'slb.json')]",
			"no": "[uri(deployment().properties.templateLink.uri, 'nothing.json')]"
		},
		"LBTemplateURI": "[variables('deployLBTemplate')[parameters('deployLBYesNo')]]",
        "deployLBintParametersHash": {
            "yes": {
                "externalInternal": {
                    "value": "internal"
                },
                "vnetName": {
                    "value": "[parameters('vnetName')]"
                },
                "subnetName": {
                    "value": "[variables('slbSubnet')]"
                },
                "slbName": {
                    "value": "[concat(variables('slbName'), '-int')]"
                },
                "lbSku": {
                    "value": "[parameters('lbSku')]"
                },
                "backendConfigName": {
                    "value": "[concat(variables('slbBackendName'), '-int')]"
                },
                "ipPrefix": {
                    "value": "[variables('ipPrefix')]"
                },
                "vipSuffix": {
                    "value": "[variables('vipSuffix')]"
                },
                "probePort": {
                    "value": 1138
                },
                "frontendPort": {
                    "value": 22
                },
                "backendPort": {
                    "value": 22
                },
                "ruleName": {
                    "value": "ssh"
                }
            },
            "no": {
            }
        },
        "deployLBintParameters": "[variables('deployLBintParametersHash')[parameters('deployLBYesNo')]]",
        "deployLBextParametersHash": {
            "yes": {
                "externalInternal": {
                    "value": "external"
                },
                "vnetName": {
                    "value": "[parameters('vnetName')]"
                },
                "subnetName": {
                    "value": "[variables('slbSubnet')]"
                },
                "slbName": {
                    "value": "[concat(variables('slbName'), '-ext')]"
                },
                "lbSku": {
                    "value": "[parameters('lbSku')]"
                },
                "backendConfigName": {
                    "value": "[concat(variables('slbBackendName'), '-ext')]"
                },
                "pipName": {
                    "value": "[concat(variables('slbPipName'), '-ext')]"
                },
                "probePort": {
                    "value": 1139
                },
                "frontendPort": {
                    "value": 1022
                },
                "backendPort": {
                    "value": 22
                },
                "ruleName": {
                    "value": "ssh"
                }
            },
            "no": {
            }
        },
        "deployLBextParameters": "[variables('deployLBextParametersHash')[parameters('deployLBYesNo')]]"
    },
    "resources": [
		{
			"comments": "Availability set for eventual NVA HA",
			"type": "Microsoft.Compute/availabilitySets",
			"name": "[variables('avSetName')]",
			"apiVersion": "2016-04-30-preview",
            "location": "[resourceGroup().location]",
            "sku":{
                "name": "Aligned"
            },
            "tags": {

            },
            "properties":{
                "platformUpdateDomainCount": 1,
                "platformFaultDomainCount": 1
            }
		},
		{
			"comments": "Optionally, create an internal load balancer",
            "name": "[concat(variables('slbName'),'-int')]",
			"type": "Microsoft.Resources/deployments",
			"apiVersion": "2017-05-10",
			"properties": {
				"mode": "Incremental",
				"templateLink": {
					"uri": "[variables('LBTemplateUri')]",
					"contentVersion": "1.0.0.0"
				},
				"parameters":  "[variables('deployLBintParameters')]"
			}
		},
		{
			"comments": "Optionally, create an external load balancer. Wait until the internal has been created, there seems to be some conflict when creating both at the same time",
            "name": "[concat(variables('slbName'),'-int')]",
			"type": "Microsoft.Resources/deployments",
			"apiVersion": "2017-05-10",
			"properties": {
				"mode": "Incremental",
				"templateLink": {
					"uri": "[variables('LBTemplateUri')]",
					"contentVersion": "1.0.0.0"
				},
				"parameters":  "[variables('deployLBextParameters')]"
			},
            "dependsOn": [
                "[concat(variables('slbName'),'-int')]"
            ]
		},
        {
            "comments": "Deploy Linux VM as Virtual Network Appliance",
            "type": "Microsoft.Compute/virtualMachines",
            "name": "[concat(parameters('vmName'), '-', copyIndex(1))]",
            "apiVersion": "[variables('computeApiVersion')]",
            "location": "[resourceGroup().location]",
            "properties": {
				"availabilitySet": {
					"id": "[resourceId('Microsoft.Compute/availabilitySets', variables('avSetName'))]"
				},
                "hardwareProfile": {
                    "vmSize": "[variables('settings')['vmSize']]"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "[variables('settings')['publisher']]",
                        "offer": "[variables('settings')['product']]",
                        "sku": "[variables('settings')['sku']]",
                        "version": "latest"
                    },
                    "osDisk": {
                        "name": "[concat(parameters('vmName'), '-', copyIndex(1),'-disk')]",
                        "createOption": "FromImage",
                        "managedDisk": {
                            "storageAccountType": "[variables('OsDiskType')]"
                        },
                        "caching": "ReadWrite"
                    },
                    "dataDisks": []
                },
                "osProfile": {
                    "computerName": "[concat(parameters('vmName'), '-', copyIndex(1))]",
                    "adminUsername": "[parameters('adminUsername')]",
                    "linuxConfiguration": {
                        "disablePasswordAuthentication": false
                    },
                    "secrets": [],
                    "adminPassword": "[parameters('adminPassword')]"
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(parameters('vmName'), '-', copyIndex(1), '-nic0'))]",
                            "properties": {
                                "primary": true
                            }
                        },
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(parameters('vmName'), '-', copyIndex(1), '-nic1'))]",
                            "properties": {
                                "primary": false
                            }
                        }
                    ]
                }
            },
            "resources": [],
            "copy": {
                "name": "[parameters('vmName')]",
                "count": "[parameters('vmCount')]"
            },
            "dependsOn": [
                "[concat(parameters('vmName'), '-nic0')]",
                "[concat(parameters('vmName'), '-nic1')]"
            ]
        },
		{
            "comments": "Create eth0 with or without PIP, depending on the template",
			"name": "[concat(parameters('vmName'), '-', copyIndex(1), '-nic0')]",
			"type": "Microsoft.Resources/deployments",
			"apiVersion": "2016-06-01",
			"properties": {
				"mode": "Incremental",
				"templateLink": {
					"uri": "[variables('nic0Template')]",
					"contentVersion": "1.0.0.0"
				},
				"parameters":  {
                    "nicName": {"value": "[concat(parameters('vmName'), '-', copyIndex(1), '-nic0')]"},
                    "ipAddress": { "value": "[parameters('ip0')]" },                    
                    "vnetName": { "value": "[parameters('vnetName')]" },
                    "subnetName": { "value": "[parameters('subnet0Name')]"},
                    "pipSku": { "value": "[parameters('lbSku')]"},
                    "pipName": { "value": "[concat(parameters('pipName'), '-', copyIndex(1))]" }
                }
            },
            "dependsOn": [
            ],
            "copy": {
                "name": "[concat(parameters('vmName'), '-nic0')]",
                "count": "[parameters('vmCount')]"
            }
        },
		{
			"comments": "Create eth1",
            "name": "[concat(parameters('vmName'), '-', copyIndex(1), '-nic1')]",
			"type": "Microsoft.Resources/deployments",
			"apiVersion": "2016-06-01",
			"properties": {
				"mode": "Incremental",
				"templateLink": {
					"uri": "[variables('nic1Template')]",
					"contentVersion": "1.0.0.0"
				},
				"parameters":  {
                    "nicName": {"value": "[concat(parameters('vmName'), '-', copyIndex(1), '-nic1')]"},
                    "ipAddress": { "value": "[parameters('ip1')]" },                    
                    "vnetName": { "value": "[parameters('vnetName')]" },
                    "subnetName": { "value": "[parameters('subnet1Name')]"}
                }
            },
            "dependsOn": [  
                "[concat(parameters('vmName'), '-nic0')]"
            ],
            "copy": {
                "name": "[concat(parameters('vmName'), '-nic1')]",
                "count": "[parameters('vmCount')]"
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "name": "[concat(parameters('vmName'), '-', copyIndex(1), '/installcustomscript')]",
            "apiVersion": "2015-05-01-preview",
            "location": "[resourceGroup().location]",
            "properties": {
                "publisher": "Microsoft.Azure.Extensions",
                "type": "CustomScript",
                "typeHandlerVersion": "2.0",
                "autoUpgradeMinorVersion": true,
                "settings": {
                    "fileUris": [
                        "[parameters('scriptUri')]"
                    ],
                    "commandToExecute": "[parameters('scriptCmd')]"
                }
            },
            "dependsOn": [
                "[parameters('vmName')]"
            ],
            "copy": {
                "name": "[concat(parameters('vmName'), '-script')]",
                "count": "[parameters('vmCount')]"
            }
        }
    ]
}